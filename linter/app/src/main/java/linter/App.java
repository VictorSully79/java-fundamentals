/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linter;

import java.io.File;
import java.util.*;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
    }
    public static int findMinVal(int[] arr) {
        int minValue = Integer.MAX_VALUE;
        for(int num:arr) {
            minValue = Math.min(minValue,num);
        }
        return minValue;
    }
    public static int findMaxVal(int[] arr) {
        int maxValue = Integer.MIN_VALUE;
        for(int num:arr){
            maxValue = Math.max(maxValue,num);
        }
        return maxValue;
    }


    public static String displayHighLow(int[][] data) {
        HashSet<Integer> temps = new HashSet<>();
        int minVal = Integer.MAX_VALUE;
        int maxVal = Integer.MIN_VALUE;
        ArrayList<Integer> missingNums = new ArrayList<>();

        for(int[] arr:data) {
            minVal = Math.min(findMinVal(arr),minVal);
            maxVal = Math.max(findMaxVal(arr),maxVal);
            for(int num:arr) {
                temps.add(num);
            }
        }
        for(int i=minVal;i<maxVal;i++) {
            if(!temps.contains(i)) {
                missingNums.add(i);
            }
        }
        StringBuilder message = new StringBuilder("High: " + maxVal + "\nLow: " + minVal + "\n");
        for(int num : missingNums) {
            message.append("Never saw temperature: ").append(num).append("\n");
        }
        System.out.println(message.toString());
        return message.toString();
    }

    public static String tally(List<String> votes) {
        HashMap<String,Integer> tally = new HashMap<>();
        int highestVoteCount = Integer.MIN_VALUE;
        String itemWithMostVotes = "";
        for(String vote:votes) {
            if(tally.containsKey(vote)) {
                int currentTally = tally.get(vote);
                currentTally++;
                tally.put(vote,currentTally);
                if(currentTally > highestVoteCount) {
                    highestVoteCount = currentTally;
                    itemWithMostVotes = vote;
                }
            } else {
                tally.put(vote,1);
            }
        }
        String winner = itemWithMostVotes + " received the most votes";
        System.out.println(winner);
        return winner;
    }

    public static ArrayList<String> readJSFile(String filePath) {
        ArrayList<String> faultyLines = new ArrayList<>();
        File file = new File(filePath);
        Scanner fileScanner;
        try
        {
            fileScanner = new Scanner(file);
        }
        catch(Exception e)
        {
            System.out.println("Sorry either the file doesn't exist or you're referencing the wrong directory");
            return faultyLines;
        }
        int currentLine = 1;
        if(!fileScanner.hasNextLine()) {
            System.out.println("Empty File");
            return faultyLines;
        }
        while(fileScanner.hasNextLine()) {
            String line = fileScanner.nextLine();
            if(
                    !line.contains(";") &&
                            line.length() != 0 &&
                            !line.contains("if")   &&
                            !line.contains("else") &&
                            line.charAt(line.length()-1) !='{' &&
                            line.charAt(line.length()-1) != '}'
            ){
                String message = "Line " + currentLine + ": Missing semicolon";
                System.out.println(message);
                faultyLines.add(message);
            }
            currentLine++;
        }
        System.out.println(faultyLines.size() == 0 ? "No errors\n": "\n");
        return faultyLines;
    }
}

